%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Execution tests to make sure results are reproducible with no MPI and with MPI
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
No MPI - No memory leaks/warnings (time steps are matched, i.e. no interpolation)
Processor  0:  1.9830  0.0065  0.0080    0.100    0.029    0.010    0.018    0.009    0.014
Processor  0:  1.9826  0.0068  0.0084    0.100    0.029    0.010    0.018    0.008    0.014
Processor  0:  1.9844  0.0061  0.0078    0.100    0.028    0.010    0.018    0.009    0.014
Processor  0:  1.9852  0.0068  0.0081    0.100    0.029    0.010    0.018    0.009    0.014

MPI, not called using mpiexec
Processor  0:  1.9830  0.0065  0.0080    0.100    0.029    0.010    0.018    0.009    0.014
Processor  0:  1.9826  0.0068  0.0084    0.100    0.029    0.010    0.018    0.008    0.014
Processor  0:  1.9847  0.0065  0.0082    0.099    0.028    0.010    0.018    0.009    0.014

MPI, n=1
Processor  0:  1.9830  0.0065  0.0080    0.100    0.029    0.010    0.018    0.009    0.014
Processor  0:  1.9826  0.0068  0.0084    0.100    0.029    0.010    0.018    0.008    0.014
Processor  0:  1.9847  0.0065  0.0082    0.099    0.028    0.010    0.018    0.009    0.014

MPI, n=2
Processor  1:  1.9847  0.0065  0.0082    0.099    0.028    0.010    0.018    0.009    0.014

MPI, n=3
Processor  2:  1.9847  0.0065  0.0082    0.099    0.028    0.010    0.018    0.009    0.014

MPI, no call mpiexec, with interpolation but matched time steps (1000 steps)
Processor  0:  1.9847  0.0065  0.0082    0.099    0.028    0.010    0.018    0.009    0.014

MPI, no call mpiexec, with interpolation Lt=2*dt (2000 steps)
Processor  0:  1.9847  0.0065  0.0082    0.099    0.028    0.010    0.018    0.009    0.014

MPI, no call mpiexec, with interpolation Lt=dt/2 (500 steps)
Processor  0:  1.9847  0.0065  0.0082    0.099    0.028    0.010    0.018    0.009    0.014

MPI, no call mpiexec, with interpolation Lt=dt*1.25 (800 steps)
Processor  0:  1.9847  0.0065  0.0082    0.099    0.028    0.010    0.018    0.009    0.014
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Comparing algorithms for bijk*R
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Average time to eval bijk*R for algorithm
1: bijk_times_R(...)
2: bijk_times_R2(...)
3: bijk_times_R3(...)
** Improved with no non-contigious memory access **

Validate that all methods produce the same results
--------------------------------------------------------------------------------------------------------
1: Processor  0:  1.8172 -0.0798 -0.0075    0.068    0.024    0.008    0.022    0.011    0.012 
2: Processor  0:  1.8172 -0.0798 -0.0075    0.068    0.024    0.008    0.022    0.011    0.012
3: Processor  0:  1.8172 -0.0798 -0.0075    0.068    0.024    0.008    0.022    0.011    0.012
--------------------------------------------------------------------------------------------------------


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Scaling Tests with no change in time step:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
80x80
--------------------------------------------------------------------------------------------------------
Nextra=0            Nextra=1       Nextra=2
--------------------------------------------------------------------------------------------------------
1: 0.006 seconds  0.012 seconds  0.02 seconds (~)
2: 0.097 seconds  0.19  seconds  0.29 seconds (x14.5 slower than 1)
3: 7.66  seconds  15.1  seconds  22.7 seconds (x1135 slower than 1) (x78 slower than 2)
--------------------------------------------------------------------------------------------------------

160x160
--------------------------------------------------------------------------------------------------------
Nextra=0            Nextra=1       Nextra=2
--------------------------------------------------------------------------------------------------------
1: 0.044 seconds  0.088 seconds  0.13 seconds (~)(x6.5 slower than 80x80)
2: 1.55  seconds  3.10  seconds  4.58 seconds (x35 slower than 1) (x15.8 slower than 80x80)
3: 135  seconds  (270)  seconds (405) seconds (x3058 slower than 1) (x17 slower than 80x80) (x88 slower than 2)
--------------------------------------------------------------------------------------------------------
(*) estimated time

320x320
--------------------------------------------------------------------------------------------------------
Nextra=0            Nextra=1       Nextra=2
--------------------------------------------------------------------------------------------------------
1: 0.39  seconds  0.59  seconds  0.89 seconds (~)(x44.5 slower than 80x80, x6.8 slower than 160x160)
2:  23.  seconds   47.  seconds   72. seconds (x80 slower than 1) (x15.8 slower than 80x80)
3: (2160) seconds  (4320)  seconds (6480) seconds (x7280 slower than 1) (assumed x16 slower than 160x160) (x90 slower than 2)
--------------------------------------------------------------------------------------------------------
(*) estimated time

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Scaling Tests with change in time
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Nextra=0        
--------------------------------------------------------------------------------------------------------
(80x80)           (80x80-2x time)              (160x160)                           (160x160-2x time)
933,120            1,721,088                  3,732,480                               6,884,362
--------------------------------------------------------------------------------------------------------
1: 0.006 seconds  0.014 seconds (x1.6) [nt] 0.044 seconds (x6.5) [nx*ny]      0.054 seconds (x9)    [nt*nx*ny]
2: 0.097 seconds  0.1  seconds  (x1)   [1]  1.55  seconds (x16)  [nx^2*ny^2]  1.7 seconds   (x17.5) [nx^2*ny^2]
3: 7.66  seconds  13.1 seconds  (x1.7) [nt] 135  seconds (x17.6) [nx^2*ny^2]  236 seconds   (x30)   [nt*nx^2*ny^2]
--------------------------------------------------------------------------------------------------------
(*) - speed up relative to 80x80
[*] - rough scaling nt=time, nx=x direction, ny=y direction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Scaling Tests relative to algorithm speed up
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
--------------------------------------------------------------------------------------------------------
(80x80)           (80x80-2x time)      (160x160)               (160x160-2x time)
933,120            1,721,088             3,732,480                      6,884,362
--------------------------------------------------------------------------------------------------------
1:   x1               x1   (x1)    [~]    x1    (x1)   [~]               x1    (x9)   [~]
2:  x16               x7.1  (x0.5) [1]    x35   (x2.1) [nx^.5*ny^.5]     x31 (x1.9)   [nx^.5*ny^.5]
3:  x1277             x936 (x0.7)  [1]    x3068 (x2.4) [nx^.5*ny^.5]     x4370 (x3.4) [nt*nx*ny]
--------------------------------------------------------------------------------------------------------
(*) - speed up relative to 80x80
[*] - rough scaling nt=time, nx=x direction, ny=y direction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Scaling tests for best algorithm
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
--------------------------------------------------------------------------------------------------------
Nextra=2, bijk*R method 1, 100 iterations
--------------------------------------------------------------------------------------------------------
Input size  R size      R Memory   Total Memory and scaling           Time per iteration and scaling
--------------------------------------------------------------------------------------------------------
80x80x1:   933,120        7.11 MB   22.3 MB                           0.025 s                        
160x160x2: 7,050,240     53.8 MB   165.2 MB  x7.4/7.55 Mscale=0.98    0.189 s  x7.69/7.55  Tscale=1.018
320x320x4: 54,743,040   417.6 MB     1.24 GB x7.5/7.76 Mscale=0.97    1.455 s  x7.70/7.76  Tscale=0.992
640x640x8: 431,308,800    3.21 GB    9.70 GB x7.8/7.88 Mscale=0.99   12.12 s   x8.32/7.88  Tscale=1.056 
--------------------------------------------------------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Final results
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-algorithm 1 scales linearly in time and memory usage with the number of elements in background mesh
-algorithm 2 scales at the rate of nx^2*ny^2
-algorithm 3 scales at the rate of nt*nx^2*ny^2
if number of elements are doubled in each direction then the increase in cost is
  algorithm 1 = 8x
  algorithm 2 = 16x
  algorithm 3 = 32x

-Order of magnitude difference between algorithm 3 and algorithm 1 is order 1000
-Order of magnitude difference between algorithm 3 and algorithm 2 is order 100
-Order of magnitude difference between algorithm 2 and algorithm 1 is order 10

-time scales linearly with Nextra (padding to evaluate multiple velocities for interpolation)
   Nextra=0 => 1x time
   Nextra=1 => 2x time
   Nextra=2 => 3x time (for 3rd temporal accuracy for interpolation of velocity)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
